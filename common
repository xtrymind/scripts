#!/usr/bin/env bash

# check if bash or zsh
if [[ ${0} = bash ]]; then
	source ${HOME}/scripts/git/git-prompt.sh
	source ${HOME}/scripts/git/git-completion.bash
	source ${HOME}/scripts/git/git.plugin.bash
	export GIT_PS1_SHOWDIRTYSTATE=1
	export GIT_PS1_SHOWUPSTREAM=auto
	export PROMPT_COMMAND='__git_ps1 "\[\033[01;34m\]\u@\h \[\033[01;32m\]\w\[\033[01;31m\]" " \[\033[39m\]\$\[\033[0m\] "'
fi

if [[ "$(command -v hub)" ]]; then
    alias git='hub';
fi

# alias Arch Linux
alias inst="sudo pacman -S --noconfirm "
alias rem="sudo pacman -Rns "
alias upd="sudo pacman -Syu --noconfirm "
alias ref="sudo reflector --latest 200 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist"
alias cu="checkupdates"

# moar alias
alias p1="patch -p1"

# Colors
BLINK_RED="\033[05;31m"
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

# Number of make threads
THREADS=$(nproc --all)
JOBS_FLAG="-j${THREADS}"

# Common ccache variable
CCACHE=$(command -v ccache)

# Directory
KERNELDIR="${HOME}/kernel";
LOS=${HOME}/android/lineage

if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# toolchain
CC_49=${HOME}/kernel/toolchain/aarch64-linux-gnu-4.x-linaro-20180409/bin/aarch64-linux-gnu-
CC_7=${HOME}/kernel/toolchain/aarch64-linux-gnu-7.x-linaro-20180411/bin/aarch64-linux-gnu-

# Use ccache
export USE_CCACHE=1;
if [[ -z "${CCACHE_DIR}" ]]; then
    export CCACHE_DIR="${HOME}/.ccache";
fi

function syncc() {
    time repo sync --force-broken --force-sync --detach --no-clone-bundle --current-branch --no-tags "$@";
}

function sjack() {
    . ${LOS}/prebuilts/sdk/tools/jack-admin stop-server
}

function los(){
	export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
	export PATH="/opt/python2:$PATH"
	export LC_ALL=C
	
	cd ${LOS}
	syncc
}

function localcfg(){
	make LSMOD=${HOME}/.config/modprobed.db localmodconfig
}

# Formats the time
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}
