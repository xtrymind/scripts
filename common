#!/usr/bin/env bash

# check if bash or zsh
if [[ ${0} = bash ]]; then
    source ${HOME}/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export PROMPT_COMMAND='__git_ps1_custom "\[\033[01;34m\]\u@\h \[\033[01;32m\]\w\[\033[01;31m\]" " \[\033[39m\]\$\[\033[0m\] "'
fi

# Location of "scripts" folder
SCRIPTS_FOLDER="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/scripts"

# Directory
LOS=${HOME}/android/lineage
TC_FOLDER=${HOME}/toolchains
FOLDER_MAGISK=${HOME}/repo/magisk-files
KERNEL_FOLDER=${HOME}/local/kernel
BIN_FOLDER=${HOME}/bin

# alias
alias inst="sudo pacman -S --noconfirm "
alias rem="sudo pacman -Rns "
alias upd="sudo pacman -Syu --noconfirm "
alias ref="sudo reflector --latest 200 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist"
alias cu="checkupdates"
alias hos="python updateHostsFile.py --auto --replace --extensions fakenews gambling --flush-dns-cache"
alias p1="patch -p1"
alias mzip='for dir in */; do base=$(basename "$dir"); zip -r9 "${base}.cbz" "$dir"; done'

# Colors
BLINK_RED="\033[05;31m"
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

# Number of make threads
THREADS=$(($(nproc --all) + 1))
JOBS_FLAG="-j${THREADS}"

# Common ccache variable
CCACHE=$(command -v ccache)

if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# Use ccache
export USE_CCACHE=1;
if [[ -z "${CCACHE_DIR}" ]]; then
    export CCACHE_DIR="${HOME}/local/.ccache";
fi

# Sync repo
function syncc() {
    repo sync -j4 --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

# Kill jack after build rom
function sjack() {
    . prebuilts/sdk/tools/jack-admin stop-server
}

# Build rom
function rom(){
    export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
    export PATH="/opt/python2:$PATH"
    export LC_ALL=C
}

# Create config based on modprobed.db
function localmodcfg(){
    make LSMOD=${HOME}/.config/modprobed.db localmodconfig
}

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    display_error "${@}"
    if type -p pre_exit_commands; then
        pre_exit_commands
    fi
    exit
}

# Prints a warning in bold yellow
function warn() {
    echo
    echo "${YLW}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Formats the time
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# Convert a file location to gitlab web link
function web_link_gitlab() {
    echo "${1}" | sed s/"$(echo "${FOLDER_MAGISK}" | sed 's/\//\\\//g')"/https:\\/\\/gitlab.com\\/xtrymind\\/magisk-files\\/raw\\/master/
}

# Convert a file location to github web link
function web_link_github() {
    echo "${1}" | sed s/"$(echo "${FOLDER_MAGISK}" | sed 's/\//\\\//g')"/https:\\/\\/raw.githubusercontent.com\\/xtrymind\\/magisk-files\\/master/
}
