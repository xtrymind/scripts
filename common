#!/usr/bin/env bash

###############
#  VARIABLES  #
###############

# Location of "scripts" folder
SCRIPTS_FOLDER=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)

# Directory
LOS=${HOME}/local/lineage
KERNEL_FOLDER=${HOME}/local/kernel
BIN_FOLDER=${HOME}/bin
LINUX_FOLDER=${HOME}/local/linux/kernel

# Export
export LINUX_FOLDER

# Colors
BLINK_RED="\033[05;31m"
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

# Number of make threads
THREADS=$(nproc --all)
JOBS_FLAG="-j${THREADS}"

if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# Add path for comvert
if [ -d "${HOME}/repo/comvert" ] ; then
    PATH="${HOME}/repo/comvert:$PATH"
fi

# Use ccache
export USE_CCACHE=1
export PATH="/usr/lib/ccache/bin/:$PATH"
export CCACHE_DIR=${HOME}/local/.ccache

###############
#  FUNCTIONS  #
###############

# Sync repo
function rps {
    repo sync -j4 --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune "${@}" #|& rg --color=never --after-context=3 "git:" && echo
}

# Set up android build environment
function envrom(){
    source venv/bin/activate
    export LC_ALL=C
}

# Brunch with cmka for build lineage
function bcmka(){
    [[ ${#} -lt 1 ]] && { display_error "This function takes an argument!"; return; }
    DEVICE=${1}

    lunch lineage_${DEVICE}-userdebug
    m installclean
    m bacon
}

# Create config based on modprobed.db
function localmodcfg(){
    make LSMOD=${HOME}/.config/modprobed.db localmodconfig
}

# Alias for echo to print escape codes
function echo() {
    command echo -e "${@}"
}

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    # SC2034: i appears unused. Verify it or export it.
    # shellcheck disable=SC2034
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    display_error "${@}"
    if type -p pre_exit_commands; then
        pre_exit_commands
    fi
    exit 1
}

# Prints a warning in bold yellow
function warn() {
    echo
    echo "${YLW}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Formats the time
function format_time() {
    local TIME_STRING
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo "${TIME_STRING}"
}

# Remove URLs from Clang version
function clang_version() {
    [[ ${#} -lt 1 ]] && { display_error "This function takes an argument!"; return; }

    local CLANG POS
    CLANG=${1}
    if [[ $(basename "${CLANG}") != "clang" ]]; then
        CLANG=$(find "${CLANG}" -name clang | head -n1)
        [[ -z ${CLANG} ]] && { display_error "You didn't supply a Clang folder/binary!"; return; }
    else
        [[ ! -f ${CLANG} ]] && { display_error "Clang binary supplied doesn't exist!"; return; }
    fi

    case "${CLANG}" in
        *linux-x86*) POS="1,2" ;;
        *) POS="1" ;;
    esac
    "${CLANG}" --version | head -n 1 | cut -d \( -f "${POS}" | sed 's/[[:space:]]*$//' || display_error "Something went wrong!"
}

# ripgrep wrapper
function rg() {
    # Bail out if rg is not installed
    command -v rg &>/dev/null || { warn "ripgrep is not installed!"; return; }

    # Colors match ag
    command rg --colors "path:fg:green" \
               --colors "path:style:bold" \
               --colors "line:fg:yellow" \
               --colors "line:style:bold" \
               --colors "column:fg:yellow" \
               --colors "column:style:bold" \
               "${@}"
}

# Add a remote if it doesn't exist
function add_remote() {
    if ! git remote | grep -q -m 1 "${1}"; then
        git remote add "${1}" "${2}"
    fi
}

# Source Telegram bot information
function load_botinfo() {
    [[ -f ${HOME}/.botinfo ]] && source ~/.botinfo
}
load_botinfo

# Telegram notifier function
function tg_msg() {
    if [[ -z ${TOKEN} ]]; then
        display_error "tg_msg() was called but there was no token!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "tg_msg() was called but there was no chat ID!"
        return 1
    fi

    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage \
            -d chat_id="${CHAT_ID}" \
            -d parse_mode="Markdown" \
            -d text="${*}" 1>/dev/null
}

# Telegram uploader function
function tg_upload() {
    local FILE; FILE=${1}; shift

    if [[ -z ${TOKEN} ]]; then
        display_error "tg_upload() was called but there was no token!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "tg_upload() was called but there was no chat ID!"
        return 1
    fi

    if [[ ! -f ${FILE} ]]; then
        display_error "tg_upload() failed to find ${FILE}!"
        return 1
    fi

    curl -s -F chat_id="${CHAT_ID}" \
            -F document=@"${FILE}" \
            -F caption="${*}" \
            -X POST https://api.telegram.org/bot"${TOKEN}"/sendDocument 1>/dev/null
}

# make cbz file from all folder in current dirrectory
function fmkacbz() {
    for dir in */; do base=$(basename "$dir"); zip -r9 "${base}.cbz" "$dir"; done
}

# make cbz file from all file in current dirrectory
function mkacbz() {
    zip -r9 ../"${PWD##*/}".cbz *
}

# convert zip file to cbz in current dirrectory
function cvcbz() {
    for file in *.zip; do mv "$file" "${file%.zip}.cbz"; done
}

# remove colon(":") from file name
function rmcolon() {
    for file in *.cbz; do mv "$file" "$(echo "$file" | sed 's/[^a-zA-Z0-9.[:space:]]//g')"; done
}

# create tar.lz4 from folder
function mkatlz4(){
    [[ ${#} -lt 1 ]] && { display_error "This function takes an argument!"; return; }
    tar cvf - ${1///} | lz4 -9 - ${1///}.tar.lz4
}

# extract tar.lz4
function untlz4(){
    [[ ${#} -lt 1 ]] && { display_error "This function takes an argument!"; return; }
    lz4 -d ${1} | tar -xv
}

function impclang() {
    export PATH=/home/xtrymind/local/toolchains/clang/bin:${PATH}
}

# for dirty build
function mcln() {
    breakfast X00T
    m installclean
}

# build ota-packages for X00T
function bldota() {
    breakfast X00T
    mka target-files-package otatools
}

# sign build with keys
function signbuild() {
    ./build/tools/releasetools/sign_target_files_apks -o -d ${HOME}/.android-certs \
    $OUT/obj/PACKAGING/target_files_intermediates/*-target_files-*.zip \
    signed-target_files.zip
}

# sign zip with keys
function signota() {
    ./build/tools/releasetools/ota_from_target_files -k ${HOME}/.android-certs/releasekey \
    --block --backup=true \
    signed-target_files.zip \
    lineage-16.0-"$(date +%Y%m%d)"-X00T-signed.zip
}

function bllvm() {
./build-llvm.py -I /home/xtrymind/local/toolchains/clang/ -t "AArch64;ARM;X86" -m native --lto thin
}

# Setup ccache
function ccache_setup() {
    if [[ -n $(command -v ccache) ]]; then
        ccache -M 40G &> /dev/null
        ccache --set-config=compression=true
        ccache --set-config=compression_level=9
        export USE_CCACHE=1
    else
        display_error "Please install ccache!"
    fi
}
