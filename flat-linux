#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Dede Dindin Qudsy
#
# Kernel compilation script

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Gather parameters
function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # build only
            "-io"|"--image-only")
                IMAGE_ONLY=true ;;

            # build without cleaning
            "-nc"|"--noclean")
                NO_CLEAN=true ;;

            # How much script output to show
            "-V"|"--verbosity-level")
                shift && enforce_value "${@}"
                VERBOSITY_LEVEL=${1}
                case ${VERBOSITY_LEVEL} in
                    "0") RG_LINES=0; HIDDEN_COMMANDS=true ;;
                    "1") SHOW_OUTPUT=true; HIDDEN_COMMANDS=true ;;
                    "2") SHOW_OUTPUT=true; VERBOSE_COMMANDS=true ;;
                esac ;;

            *)
                die "Invalid parameter" ;;
        esac

        shift
    done

    [[ -z ${VERBOSITY_LEVEL} ]] && HIDDEN_COMMANDS=true

}

# 'cp -v' alias
function cp() {
    command cp ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# 'mv -v' alias
function mv() {
    command mv ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# 'rm -v' alias
function rm() {
    command rm ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# Set variables
function generate_variables() {
    # Source folders
    SOURCE_FOLDER=${HOME}/local/linux-kernel/linux/

    # Kernel name
    LOCALVERSION="flat"

    # Check for notebook
    MODEL=$(lscpu | grep "Model name" | sed -r 's/Model name:\s{1,}(.*) CPU .*z\s*/\1/g' | cut -c19-)
    case ${MODEL} in
        i3-3217U)
            i3_3217U=true ;;
    esac

    DEFCONFIG="flat_defconfig"

    # Check if have dkms
    if command -v dkms > /dev/null 2>&1; then HAVE_DKMS=true; fi

    # Installed kernel version
    IKVER=$(uname -r)
}

# Clean up
function clean_up() {
    # Only cd if kernel source exist
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"
    if [[ -z ${NO_CLEAN} ]]; then
        make clean && make mrproper
    fi
}

# Compile kernel
function compile(){
    KCFLAGS="-floop-nest-optimize \
             -fgraphite-identity \
             -ftree-loop-distribution \
             -ffast-math \
             -funsafe-math-optimizations \
             -O3"

    make ${DEFCONFIG} prepare

    if [[ -n ${i3_3217U} ]]; then
        ./scripts/config --file .config -d CONFIG_OPTIMIZE_FOR_2500
        ./scripts/config --file .config -e CONFIG_OPTIMIZE_FOR_3217U
        make olddefconfig
    fi

    if [[ -n ${SHOW_OUTPUT} ]]; then
        make "${JOBS_FLAG}" \
        KCFLAGS="${KCFLAGS}"
    else
        make "${JOBS_FLAG}"  \
        KCFLAGS="${KCFLAGS}" |& rg --color=never --after-context=${RG_LINES:-10} "error:|warning:" && echo
    fi
    # Export kernel version
    KERVER=$(cat include/config/kernel.release)
}

# Remove old kernel & modules
function remove_old_kernel() {
    sudo rm -f /boot/vmlinuz-linux-${LOCALVERSION}
    [[ ${IKVER} == *"${LOCALVERSION}"* ]] && sudo rm -rf /lib/modules/"${IKVER}"
}

## Rebuild dkms module
# shellcheck disable=SC2086
function rebuild_dkms() {
    list_dkms=$(dkms status | sed 's/,//g;s/://g' | awk '{print $1"/"$2}')
    for i in ${list_dkms[@]}; do
        sudo dkms remove $i -k "${IKVER}"
        sudo dkms install $i -k "${IKVER}"
    done
}

# Install new kernel
function install_kernel(){
    sudo make modules_install
    if [[ -n ${HAVE_DKMS} ]]; then
        rebuild_dkms
    fi
    if [[ "${IKVER}" != "${KERVER}" ]]; then
        remove_old_kernel
    fi
    extramodule
    sudo cp arch/x86_64/boot/bzImage /boot/vmlinuz-linux-${LOCALVERSION}
    sudo cp System.map /boot/System.map
    sudo mkinitcpio -k "${KERVER}" -g /boot/initramfs-linux-${LOCALVERSION}.img
}

# Copy kernel version
function extramodule(){
    extradir="/usr/lib/modules/extramodules-${LOCALVERSION}"
    [[ ! -d ${extradir} ]] && sudo mkdir ${extradir}
    sudo cp -f include/config/kernel.release ${extradir}/version
}

# Do sanity check
function sanitycheck(){
    [[ ! -f /boot/vmlinuz-linux-${LOCALVERSION} ]] && echo "vmlinuz-linux-flat not found"
    [[ ! -f /boot/initramfs-linux-${LOCALVERSION}.img ]] && echo "initramfs not found"
    [[ ! -d /usr/lib/modules/${KERVER} ]] && echo "modules folder not found"
}

# Print file info
function ending_info() {
    END=$(date +"%s")
    DURATION=$(format_time "${START}" "${END}")
    echo "${GRN}DURATION: ${DURATION}${RST}"
}

# shellcheck disable=SC1090
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# Start tracking time
START=$(date +"%s")

parse_parameters "${@}"
generate_variables
clean_up
compile
if [[ -z ${IMAGE_ONLY} ]]; then
    install_kernel
    sanitycheck
fi
ending_info
