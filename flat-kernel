#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 Nathan Chancellor
# Copyright (C) 2018 Dede Dindin Qudsy
#
# Kernel compilation script

source ${HOME}/dotfiles/common

# directory
KERNELDIR=${HOME}/devel/kernel
SOURCE_FOLDER=${KERNELDIR}/mido
OUT_FOLDER=${SOURCE_FOLDER}/out
BIN_FOLDER=${HOME}/bin
TC_FOLDER=${HOME}/toolchains

# variable
ARCHITECTURE=arm64
DEVICE_NAME_GITHUB=mido
KERNEL_BRANCH=flat

# Common ccache variable
CCACHE=$(command -v ccache)

# Start tracking time
START=$(date +"%s")

# Number of make threads
THREADS=$(nproc --all)
JOBS_FLAG="-j${THREADS}"

# Gather parameters
function parse_parameters() {
    # Unset the universal OS variable for this script only
    PARAMS="${*}"
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # AnyKernel folder
            "-ak"|"--anykernel")
                shift && enforce_value "${@}"

                AK=${1} ;;

            # Compiler to use
            "-cc"|"--compiler")
                shift && enforce_value "${@}"

                COMPILER=${1} ;;

            # Config to use for compiling
            "-c"|"--config")
                shift && enforce_value "${@}"

                DEFCONFIG=${1} ;;

            # Where to move zip after compilation
            "-m"|"--mode")
                shift && enforce_value "${@}"

                MODE=${1} ;;

            # Test versioning (# in kernel version)
            "-r"|"--revision")
                shift && enforce_value "${@}"

                REVISION=${1} ;;

            # Version number
            "-v"|"--version")
                shift && enforce_value "${@}"

                VERSION=${1} ;;

            # Disables -Werror config
            "-Wno-error")
                NO_WERROR=true ;;

            *)
                die "Invalid parameter" ;;
        esac

        shift
    done

    # Default parameters
    [[ -z ${DEVICE} ]] && DEVICE="mido"
    [[ -z ${MODE} ]] && MODE="personal"

    # Easy to use variables for if statements
    [[ ${MODE} = "personal" ]] && PERSONAL=true || PERSONAL=false

}

# 'cp -v' alias
function cp() {
    command cp -v "${@}"
}

function device_flags() {
    case ${DEVICE} in
        "mido")
            [[ -z ${COMPILER} ]] && COMPILER=clang

            [[ -z ${DEFCONFIG} ]] && DEFCONFIG="flat_defconfig"

            [[ -z ${AK} ]] && AK="AnyKernel2"

            DEVICE_NAME_FILE=${DEVICE^}
            DEVICE_NAME_GITHUB=mido

            [[ -z ${GCC_FOLDER} ]] && GCC_FOLDER=${TC_FOLDER}/aarch64-linux-gnu_8.2.1
            [[ -z ${CLANG_FOLDER} ]]&& CLANG_FOLDER=${TC_FOLDER}/android-clang-8.x/
            ;;

        *)
            die "Invalid device!" ;;
    esac
}

# Set up other variables
function generate_variables() {
    GCC_BIN=$(find "${GCC_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)
    [[ -z ${GCC_BIN} ]] && die "64-bit GCC toolchain could not be found!"
    GCC=${GCC_BIN%gcc}

	# Handle Clang
    if [[ ${COMPILER} = "clang" ]]; then
		CLANG=${CLANG_FOLDER}/bin/clang
		CLANG_VERSION=$(${CLANG} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')

		CLANG_LD_PATH=${CLANG_FOLDER}/lib
		LLVM_DIS=${CLANG_FOLDER}/bin/llvm-dis
		if [[ -n ${PERSONAL} ]]; then
			KCFLAGS="-mllvm -polly \
					 -mllvm -polly-run-dce \
					 -mllvm -polly-run-inliner \
					 -mllvm -polly-opt-fusion=max \
					 -mllvm -polly-ast-use-context \
					 -mllvm -polly-vectorizer=stripmine \
					 -mllvm -polly-detect-keep-going"
		fi
	fi

    # Handle AnyKernel2 Folder
    if [[ -n ${AK} ]]; then
		ANYKERNEL2_FOLDER=${KERNELDIR}/${AK}
    fi
}

# Make wrapper for make function for GCC
function make_wrapper_gcc() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${GCC}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KBUILD_BUILD_TIMESTAMP="${TIMESTAMP}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "${@}"
}

# Make wrapper for make function for Clang
function make_wrapper_clang() {
	LD_LIBRARY_PATH="${CLANG_LD_PATH}:${LD_LIBARY_PATH}" \
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CC="${CCACHE} ${CLANG}" \
         CLANG_TRIPLE=aarch64-linux-gnu- \
         CROSS_COMPILE="${GCC}" \
         HOSTCC="${CCACHE} ${CLANG}" \
         KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KBUILD_BUILD_TIMESTAMP="${TIMESTAMP}" \
         KCFLAGS="${KCFLAGS}" \
         LLVM_DIS="${LLVM_DIS}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "$@"
}
         #EXTRAVERSION=${EXVERSION}
# Silence output function
function kmake() {
        make_wrapper_${COMPILER} "${@}"
}

function backup_version(){
	cp -f "${OUT_FOLDER}"/.version /tmp/
	git clean -dfx
	mkdir "${OUT_FOLDER}"
	cp /tmp/.version "${OUT_FOLDER}"
}

# Build kernel image
function build_kernel() {
    backup_version

    # Point to proper defconfig and generate version files
    kmake ${DEFCONFIG} prepare

    # If requested, disable -Werror
    if [[ -n ${NO_WERROR} ]]; then
        ./scripts/config --file out/.config -d CONFIG_CC_WERROR
        kmake olddefconfig
    fi

    # Make the kernel
    #kmake 2>&1 | tee ../kernel.log
    kmake

    # Find the compiled files
    OUT_KERNEL_IMAGE=$(find "${OUT_FOLDER}/arch/${ARCHITECTURE}" -name 'Image.*-dtb' 2>/dev/null)

    # Move them if they exist, error out if not
    if [[ -n ${OUT_KERNEL_IMAGE} ]]; then
        echo "${GRN}${OS_STRING}$(basename "${OUT_KERNEL_IMAGE}") compiled successfully!${RST}\n"
        move_kernel_files
    else
        echo "${RED}Kernel image not found!${RST}\n"
        #ending_info
    fi
}

# Move kernel files after compilation
function move_kernel_files() {
        # Move the kernel image
        cp "${OUT_KERNEL_IMAGE}" "${ANYKERNEL2_FOLDER}"
        [[ -n ${OUT_DTBO_IMAGE} ]] && cp "${OUT_DTBO_IMAGE}" "${ANYKERNEL2_FOLDER}/dtbo"
        echo "Kernel version: $(cat "${OUT_FOLDER}/include/config/kernel.release")" >> "${ANYKERNEL2_FOLDER}/version"
        echo "Revision: $(cat "${OUT_FOLDER}/.version")" >> "${ANYKERNEL2_FOLDER}/version"
}

# Package zip
function package_zip() {
    header "PACKAGING AND SIGNING ZIP"

    echo "${BOLD}Signed zip name:${RST}   ${SIGNED_ZIP}\n"

    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 folder shift failed!"

    # Package the zip without the README
    zip -r9 "${UNSIGNED_ZIP}" -x README.md -- *

    # Sign zip
    java -jar "${BIN_FOLDER}/zipsigner-3.0.jar" \
              "${UNSIGNED_ZIP}" \
              "${SIGNED_ZIP}"

    # If packaging failed, error out
    if [[ ! -f ${SIGNED_ZIP} ]]; then
        echo "${RED}Kernel zip not found after signing!${RST}\n"
        ending_info
    else
        echo "${GRN}Kernel zip successfully generated!${RST}\n"
        rm "${UNSIGNED_ZIP}"
        echo "${GRN}Kernel located at ${PWD}/${SIGNED_ZIP} ${RST}\n"
        echo "Time elapsed: $(format_time "${START}" "$(date +"%s")")"
    fi
}

# Clean up
function clean_up() {
    # Clean AnyKernel2 folder
    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"
    echo "Cleaning at ${PWD}"
    git clean -xfd

    # enter kernel directory
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"
}

# Setup compilation
function generate_version() {
    # This is set in the defconfig
	CONFIG_KERNELNAMEZIP="flatKernel"
    LOCALVERSION_ZIP="-${DEVICE_NAME_FILE}"
	
	# date in utc
	TIMESTAMP=$(date -u)

    # Add version if present
    if [[ -n ${VERSION} ]]; then
        VERSION_TEXT="-v${VERSION}"
        #LOCALVERSION="${LOCALVERSION}${VERSION_TEXT}"
    else
		RV=$(($(cat "${OUT_FOLDER}"/.version)+1))
		VERSION_TEXT="-r${RV}"
    fi

    # Add hash information to the file for debugging with 12 hash length
    NUM=12
    SHA="-g$(git rev-parse --verify --short=${NUM} HEAD)"
    LOCALVERSION="${LOCALVERSION}${SHA}"

    # If there are uncommitted changes, mark as dirty
    if [[ $( git diff-index --name-only HEAD ) ]]; then
        DIRTY="-dirty"
        LOCALVERSION="${LOCALVERSION}${DIRTY}"
    fi

    # If REVISION exists, use it for the file
    if [[ -n ${REVISION} ]]; then
        REVISION_FOR_FILE=".${MODE::1}${REVISION}"

        # If REVISION is greater than or equal to 1, pass it to the build system
        [[ ${REVISION} -ge 1 ]] && KBUILD_BUILD_VERSION=${REVISION}
    fi

    # Export KERNEL_NAME based on the above information
    KERNEL_NAME="${CONFIG_KERNELNAMEZIP}${LOCALVERSION_ZIP}${VERSION_TEXT}${REVISION_FOR_FILE}${DATE}"

    UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
    SIGNED_ZIP=${KERNEL_NAME}.zip
}

# Generate changelog
function generate_changelog() {
    echo "  - Generating changelog"

    GITHUB="http://github.com/xtrymind"
    CHANGELOG=${HOME}/flat${VERSION_TEXT}-changelog.txt

    # Kernel source first
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"

    # We need to mark the previous tag for changelog
    PREV_TAG_NAME=$(git tag --sort=-taggerdate | head -n 1)
    [[ -z ${PREV_TAG_NAME} ]] && return
    RANGE=${PREV_TAG_NAME}..HEAD

    # Show where commits are located
    {
        echo "${GITHUB}/${DEVICE_NAME_GITHUB}/commits/${KERNEL_BRANCH}\n"

        # Use shortlog for pretty output
        git log "${RANGE}" | git shortlog

        # Generate a diff as well
        git diff --find-renames --stat --summary "${RANGE}"
    } > "${CHANGELOG}"

    # Copy short changelog for FKU
    #[[ ${STABLE} ]] && cp "${SHORT_CHANGELOG}" "${FILE_MOVE}/.changelog"
}


header "COMPILING KERNEL"
parse_parameters "${@}"
device_flags
generate_variables
clean_up
# Generate variables such as versions
generate_version
build_kernel
package_zip
