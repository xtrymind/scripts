#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 Nathan Chancellor
# Copyright (C) 2018 Dede Dindin Qudsy
#
# Kernel compilation script

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Gather parameters
function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # AnyKernel folder
            "-ak"|"--anykernel")
                shift && enforce_value "${@}"

                AK=${1} ;;

            # Branch to compile
            "-b"|"--branch")
                shift && enforce_value "${@}"

                KERNEL_BRANCH=${1} ;;

            # Compiler to use
            "-cc"|"--compiler")
                shift && enforce_value "${@}"

                COMPILER=${1} ;;

            # Config to use for compiling
            "-c"|"--config")
                shift && enforce_value "${@}"

                DEFCONFIG=${1} ;;

            # Device to compile for
            "-d"|"--device")
                shift && enforce_value "${@}"

                DEVICE=${1} ;;

            # 64-bit GCC toolchain to use for compiling
            "-gt"|"--gcc-toolchain")
                shift && enforce_value "${@}"

                GCC_FOLDER=${1} ;;

            # Do not package kernel image
            "-io"|"--image-only")
                IMAGE_ONLY=true ;;

            # Test versioning (# in kernel version)
            "-r"|"--revision")
                shift && enforce_value "${@}"

                REVISION=${1} ;;

            # Time to show in kernel version
            "-ut"|"--utctime")
                UTCTIME=TRUE ;;

            # Version number
            "-v"|"--version")
                shift && enforce_value "${@}"

                VERSION=${1} ;;

            # How much script output to show
            "-V"|"--verbosity-level")
                shift && enforce_value "${@}"
                VERBOSITY_LEVEL=${1}
                case ${VERBOSITY_LEVEL} in
                    "0") RG_LINES=0; HIDDEN_COMMANDS=true ;;
                    "1") SHOW_OUTPUT=true; HIDDEN_COMMANDS=true ;;
                    "2") SHOW_OUTPUT=true; VERBOSE_COMMANDS=true ;;
                esac ;;

            # Disables -Werror config
            "-Wno-error")
                NO_WERROR=true ;;

            *)
                die "Invalid parameter" ;;
        esac

        shift
    done

    # Default parameters
    [[ -z ${DEVICE} ]] && DEVICE="mido"
    [[ -z ${VERBOSITY_LEVEL} ]] && HIDDEN_COMMANDS=true

}

# 'cp -v' alias
function cp() {
    command cp ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# 'mv -v' alias
function mv() {
    command mv ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# 'rm -v' alias
function rm() {
    command rm ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

function device_flags() {
    case ${DEVICE} in
        "mido")
            [[ -z ${COMPILER} ]] && COMPILER=gcc

            [[ -z ${DEFCONFIG} ]] && DEFCONFIG="flat_defconfig"

            [[ -z ${AK} ]] && AK="AnyKernel2"

            DEVICE_NAME_FILE=${DEVICE}
            DEVICE_NAME_GITHUB=mido

            SOURCE_FOLDER=${KERNEL_FOLDER}/${DEVICE_NAME_GITHUB}
            DEVICE_OUT_FOLDER=${SOURCE_FOLDER}/out

            # variable
            #KERNEL_BRANCH=flat

            # shellcheck disable=SC2153
            [[ -z ${GCC_FOLDER} ]] && GCC_FOLDER=${TC_FOLDER}/aarch64-linux-gnu_8.x
            [[ -z ${GCC_32_BIT_FOLDER} ]] && GCC_32_BIT_FOLDER=${TC_FOLDER}/arm-linux-gnueabi_8.x
            [[ -z ${CLANG_FOLDER} ]]&& CLANG_FOLDER=${TC_FOLDER}/android-clang-8.x
            ;;

        "tulip")
            [[ -z ${COMPILER} ]] && COMPILER=gcc

            [[ -z ${DEFCONFIG} ]] && DEFCONFIG="msm-perf_defconfig"

            [[ -z ${AK} ]] && AK="AnyKernel2_tulip"

            DEVICE_NAME_FILE=${DEVICE}
            DEVICE_NAME_GITHUB=tulip
            LEGACY_DEVICE=true

            SOURCE_FOLDER=${KERNEL_FOLDER}/${DEVICE_NAME_GITHUB}
            DEVICE_OUT_FOLDER=${SOURCE_FOLDER}

            # shellcheck disable=SC2153
            [[ -z ${GCC_FOLDER} ]] && GCC_FOLDER=${TC_FOLDER}/aarch64-linux-android-4.9
            ;;

        *)
            die "Invalid device!" ;;
    esac
}

# Set up other variables
function generate_variables() {
    # Folders
    #SOURCE_FOLDER=${KERNEL_FOLDER}/${DEVICE_NAME_GITHUB}
    OUT_FOLDER=${DEVICE_OUT_FOLDER}

    # Compilation variables
    ARCHITECTURE=arm64

    # Normal 64-bit GCC toolchain
    if [[ -z ${GCC_BINARY} ]]; then
        if [[ ! -d ${GCC_FOLDER} ]]; then
            GCC_FOLDER=${TC_FOLDER}/${GCC_FOLDER}
            [[ ! -d ${GCC_FOLDER} ]] && die "Invalid GCC folder specified!"
        fi
        GCC_BIN=$(find "${GCC_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)
    fi
    [[ -z ${GCC_BIN} ]] && die "64-bit GCC toolchain could not be found!"
    GCC=${GCC_BIN%gcc}

    # 32-bit GCC toolchain if required
    if [[ -n ${GCC_32_BIT} || -n ${GCC_32_BIT_FOLDER} ]]; then
        if [[ -z ${GCC_32_BIT} ]]; then
            if [[ ! -d ${GCC_32_BIT_FOLDER} ]]; then
                GCC_32_BIT_FOLDER=${TC_FOLDER}/${GCC_32_BIT_FOLDER}
                [[ ! -d ${GCC_32_BIT_FOLDER} ]] && die "Invalid GCC folder specified!"
            fi
            GCC_32_BIN=$(find "${GCC_32_BIT_FOLDER}/bin" \( -type f -o -type l \) -name '*-gcc' | head -n1)
        fi
        [[ -z ${GCC_32_BIN} ]] && die "32-bit GCC toolchain could not be found!"
        GCC_32_BIT=${GCC_32_BIN%gcc}
    fi

    # Handle Clang
    if [[ ${COMPILER} = "clang" ]]; then
        CLANG=${CLANG_FOLDER}/bin/clang
        CLANG_VERSION=$(${CLANG} --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')

        CLANG_LD_PATH=${CLANG_FOLDER}/lib
        LLVM_DIS=${CLANG_FOLDER}/bin/llvm-dis
        if [[ -n ${PERSONAL} ]]; then
            KCFLAGS="-mllvm -polly \
                     -mllvm -polly-run-dce \
                     -mllvm -polly-run-inliner \
                     -mllvm -polly-opt-fusion=max \
                     -mllvm -polly-ast-use-context \
                     -mllvm -polly-vectorizer=stripmine \
                     -mllvm -polly-detect-keep-going"
        fi
    fi

    # Handle AnyKernel2 Folder
    if [[ -n ${AK} ]]; then
        ANYKERNEL2_FOLDER=${KERNEL_FOLDER}/${AK}
    fi

    # date in utc
    if [[ -n ${UTCTIME} ]]; then
        TIMESTAMP=$(date -u)
    fi
}

# Setup compilation
function generate_version() {
    # This is set in the defconfig
    CONFIG_KERNELNAMEZIP="fk"
    LOCALVERSION_ZIP="-${DEVICE_NAME_FILE}"

    # Add version if present
    if [[ -n ${VERSION} ]]; then
        VERSION_TEXT="-v${VERSION}"
    else
        RV=$(($(cat "${OUT_FOLDER}"/.version)+1))
        VERSION_TEXT="-r${RV}"
    fi

    # Add hash information to the file for debugging with 8 hash length
    SHA="-g$(git rev-parse --verify --short=8 HEAD)"
    LOCALVERSION="${LOCALVERSION}${SHA}"

    # If there are uncommitted changes, mark as dirty
    if [[ $( git diff-index --name-only HEAD ) ]]; then
        DIRTY="-dirty"
        LOCALVERSION="${LOCALVERSION}${DIRTY}"
    fi

    # If REVISION exists, use it for the file
    if [[ -n ${REVISION} ]]; then
        REVISION_FOR_FILE=".${REVISION}"

        # If REVISION is greater than or equal to 1, pass it to the build system
        [[ ${REVISION} -ge 1 ]] && KBUILD_BUILD_VERSION=${REVISION}
    fi

    DATE="-$(date +%Y%m%d-%H%M)"

    # Export KERNEL_NAME based on the above information
    KERNEL_NAME="${CONFIG_KERNELNAMEZIP}${LOCALVERSION_ZIP}${VERSION_TEXT}${REVISION_FOR_FILE}${DATE}"

    UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
    SIGNED_ZIP=${KERNEL_NAME}.zip
}

# Make wrapper for make function for GCC
function make_wrapper_gcc() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${GCC}" \
         CROSS_COMPILE_ARM32="${CCACHE} ${GCC_32_BIT}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KBUILD_BUILD_TIMESTAMP="${TIMESTAMP}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "${@}"
}

# Make wrapper for make function for tulip / old devices
function make_wrapper_gcc_old() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${GCC}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KBUILD_BUILD_TIMESTAMP="${TIMESTAMP}" \
         LOCALVERSION="${LOCALVERSION}" \
         "${@}"
}

# Make wrapper for make function for Clang
function make_wrapper_clang() {
    LD_LIBRARY_PATH="${CLANG_LD_PATH}:${LD_LIBARY_PATH}" \
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CC="${CCACHE} ${CLANG}" \
         CLANG_TRIPLE=aarch64-linux-gnu- \
         CROSS_COMPILE="${GCC}" \
         CROSS_COMPILE_ARM32="${GCC_32_BIT}" \
         HOSTCC="${CCACHE} ${CLANG}" \
         KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KBUILD_BUILD_TIMESTAMP="${TIMESTAMP}" \
         KCFLAGS="${KCFLAGS}" \
         LLVM_DIS="${LLVM_DIS}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "$@"
}

# Silence output function
function kmake() {
    if [[ ${DEVICE} != "tulip" ]]; then
        if [[ -n ${SHOW_OUTPUT} ]]; then
            make_wrapper_${COMPILER} "${@}"
        else
            make_wrapper_${COMPILER} "${@}" |& rg --color=never --after-context=${RG_LINES:-10} "error:|warning:" && echo
        fi
    else
        if [[ -n ${SHOW_OUTPUT} ]]; then
            make_wrapper_gcc_old "${@}"
        else
            make_wrapper_gcc_old "${@}" |& rg --color=never --after-context=${RG_LINES:-10} "error:|warning:" && echo
        fi
    fi
}

function inc_version(){
    [[ -f "${OUT_FOLDER}"/.version ]] && cp -f "${OUT_FOLDER}"/.version /tmp/version_"${DEVICE}"
    if [[ -z ${LEGACY_DEVICE} ]]; then
        git clean -dfx ${HIDDEN_COMMANDS:+ "-q"}
    else
        kmake clean && kmake mrproper
    fi
    [[ -z ${LEGACY_DEVICE} ]] && mkdir "${OUT_FOLDER}"
    cp /tmp/version_"${DEVICE}" "${OUT_FOLDER}"/.version
}

# Build kernel image
function build_kernel() {
    inc_version

    # Point to proper defconfig and generate version files
    kmake ${DEFCONFIG} prepare

    # If requested, disable -Werror
    if [[ -n ${NO_WERROR} ]]; then
        ./scripts/config --file out/.config -d CONFIG_CC_WERROR
        kmake olddefconfig
    fi

    # Make the kernel
    kmake

    # Find the compiled files
    case ${DEVICE} in
        "mido")
            OUT_KERNEL_IMAGE=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/Image.gz-dtb
            ;;
        "tulip")
            OUT_KERNEL_IMAGE=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/Image
            ${HOME}/local/kernel/tulip_build_tools/dtbToolCM -2 -o dt.img -s 2048 -p scripts/dtc/ arch/arm/boot/dts/
            OUT_DTB_IMAGE=${OUT_FOLDER}/dt.img
            ;;
    esac

    # Move them if they exist, error out if not
    if [[ -f ${OUT_KERNEL_IMAGE} ]]; then
        echo "${GRN}${OS_STRING}$(basename "${OUT_KERNEL_IMAGE}") compiled successfully!${RST}\n"
        [[ -z ${IMAGE_ONLY} ]] && move_kernel_files
    else
        echo "${RED}Kernel image not found!${RST}\n"
        ending_info
    fi
}

# Clean up
function clean_up() {
    # Clean AnyKernel2 folder if building a zip
    if [[ -z ${IMAGE_ONLY} ]]; then
        cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"
        git clean -xfd ${HIDDEN_COMMANDS:+ "-q"}
    fi

    # enter kernel directory
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"
    if [[ -n ${KERNEL_BRANCH} ]]; then
        if [[ -z $(git status | ag "bisec|rebas") ]]; then
            git checkout ${HIDDEN_COMMANDS:+ "-q"} "${KERNEL_BRANCH}" || die "${KERNEL_BRANCH} doesn't exist!"
        fi
    fi
}

# Print variables
function print_variables() {
    echo "${BOLD}Device:${RST}     ${DEVICE}\n"

    echo "${BOLD}Branch:${RST}     $(git describe --exact-match 2>/dev/null || git cb) @ $(git kf)\n"

    [[ ${COMPILER} = "clang" ]] && echo "${BOLD}Clang:${RST}      ${CLANG}\n"

    echo "${BOLD}GCC:${RST}        ${GCC}\n"
}

# Move kernel files after compilation
function move_kernel_files() {
    # Move the kernel image
    cp "${OUT_KERNEL_IMAGE}" "${ANYKERNEL2_FOLDER}"
    [[ -n ${OUT_DTB_IMAGE} ]] && cp "${OUT_DTB_IMAGE}" "${ANYKERNEL2_FOLDER}"
    echo "Kernel version: $(cat "${OUT_FOLDER}/include/config/kernel.release")" >> "${ANYKERNEL2_FOLDER}/version"
    echo "Revision: $(cat "${OUT_FOLDER}/.version")" >> "${ANYKERNEL2_FOLDER}/version"

    # Grab modules too if they are present
    MODULES="$(find "${OUT_FOLDER}" -name '*.ko')"
    if [[ -n ${MODULES} ]]; then
        MODULES_FOLDER=${ANYKERNEL2_FOLDER}/modules/system/lib/modules/
        for MOD in ${MODULES}; do
            "${GCC}"strip --strip-unneeded "${MOD}"
            cp "${MOD}" "${MODULES_FOLDER}"
        done
    fi
}

# After build tasks
function after_build_tasks() {
    if [[ -z ${IMAGE_ONLY} ]]; then
        package_zip
    fi
}

# Package zip
function package_zip() {
    header "PACKAGING AND SIGNING ZIP"

    echo "${BOLD}Signed zip name:${RST}   ${SIGNED_ZIP}\n"

    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 folder shift failed!"

    # Package the zip without the README
    zip ${HIDDEN_COMMANDS:+ "-q"} -r9 "${UNSIGNED_ZIP}" -x README.md -- *

    # Sign zip
    java -jar "${BIN_FOLDER}/zipsigner-3.0.jar" \
              "${UNSIGNED_ZIP}" \
              "${SIGNED_ZIP}"

    # If packaging failed, error out
    if [[ ! -f ${SIGNED_ZIP} ]]; then
        echo "${RED}Kernel zip not found after signing!${RST}\n"
        ending_info
    else
        echo "${GRN}Kernel zip successfully generated!${RST}\n"
        rm "${UNSIGNED_ZIP}"
        mv "${SIGNED_ZIP}" "${HOME}/flatKernel"
    fi
}

# Print file info
function ending_info() {
    header "SCRIPT FINISHED!"

    END=$(date +"%s")
    DURATION=$(format_time "${START}" "${END}")

    if [[ "${*}" =~ "-s" ]]; then
        if [[ -z ${IMAGE_ONLY} ]]; then
            FILE_LOCATION=${HOME}/flatKernel/${SIGNED_ZIP}
            SIZE=$(du -h "${FILE_LOCATION}" | awk '{print $1}')

            echo "${BOLD}FILE LOCATION: ${FILE_LOCATION}"
            echo "SIZE: ${SIZE}${RST}"
        fi
        EXIT_CODE=0
    else
        echo "Build failed"
        EXIT_CODE=1
    fi

    echo "${GRN}DURATION: ${DURATION}${RST}"
    echo
    echo "\a"
    exit ${EXIT_CODE}
}

################
#              #
# SCRIPT START #
#              #
################

# shellcheck disable=SC1090
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"

# Start tracking time
START=$(date +"%s")

#################
# MAKING KERNEL #
#################

header "COMPILING KERNEL"

# Parse command line parameters and setup options
parse_parameters "${@}"
device_flags
generate_variables

# Clean up the source
clean_up

# Generate variables such as versions
generate_version

# Print relevant variables
print_variables

# Build kernel
build_kernel

# After build tasks
after_build_tasks

# Print file info and time
ending_info -s
