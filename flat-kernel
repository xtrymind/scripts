#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 Nathan Chancellor
# Copyright (C) 2018-2019 Dede Dindin Qudsy
#
# Flat Kernel compilation script

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Gather parameters
function parse_parameters() {
    PARAMS="${*}"
    EXTRA_MAKE_FLAGS=()
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # Use AOSP clang
            "-ac"|"--aosp-clang")
                AOSP_CLANG=true ;;

            # AnyKernel2 branch
            "-ak2-b"|"--anykernel2-branch")
                shift && enforce_value "${@}"

                ANYKERNEL2_BRANCH=${1} ;;

            # Android version
            "-av"|"--android-version")
                shift && enforce_value "${@}"

                ANDROID_VERSION=${1} ;;

            # Branch to compile
            "-b"|"--branch")
                shift && enforce_value "${@}"

                KERNEL_BRANCH=${1} ;;

            # Config to use for compiling
            "-c"|"--config")
                shift && enforce_value "${@}"

                DEFCONFIG=${1} ;;

            # Compiler to use
            "-cc"|"--compiler")
                shift && enforce_value "${@}"

                COMPILER=${1} ;;

            # Clang toolchain to use for compiling
            "-ct"|"--clang-toolchain")
                shift && enforce_value "${@}"

                CLANG_FOLDER=${1} ;;

            # Device to compile for
            "-d"|"--device")
                shift && enforce_value "${@}"

                DEVICE=${1} ;;

            # Extra make flags if necessary (like mismatch config)
            "-f"|"--flags")
                shift && enforce_value "${@}"

                EXTRA_MAKE_FLAGS+=( "${1}" ) ;;

            # 64-bit GCC toolchain to use for compiling
            "-gt"|"--gcc-toolchain")
                shift && enforce_value "${@}"

                GCC_FOLDER=${1} ;;

            # 32-bit GCC toolchain to use for compiling
            "-gt-32"|"--gcc-32-bit-toolchain")
                shift && enforce_value "${@}"

                GCC_32_BIT_FOLDER=${1} ;;

            # Do not package kernel image
            "-io"|"--image-only")
                IMAGE_ONLY=true ;;

            # Build with Kernel Address Sanitizer
            "-k"|"--kasan")

                KASAN=true ;;

            # Where to move zip after compilation
            "-m"|"--mode")
                shift && enforce_value "${@}"

                MODE=${1} ;;

            # Apply personal optimizations
            "-p"|"--personal-optimization")
                PERSONAL_OPTS=true ;;

            # Test versioning (# in kernel version)
            "-r"|"--revision")
                shift && enforce_value "${@}"

                REVISION=${1} ;;

            # Upload zip to Telegram
            "-t"|"--telegram")
                TG=true ;;

            # Version number
            "-v"|"--version")
                shift && enforce_value "${@}"

                VERSION=${1} ;;

            # How much script output to show
            "-V"|"--verbosity-level")
                shift && enforce_value "${@}"
                VERBOSITY_LEVEL=${1}
                case ${VERBOSITY_LEVEL} in
                    "0") RG_LINES=0; HIDDEN_COMMANDS=true ;;
                    "1") SHOW_OUTPUT=true; HIDDEN_COMMANDS=true ;;
                    "2") SHOW_OUTPUT=true; VERBOSE_COMMANDS=true ;;
                    "3") EXTRA_MAKE_FLAGS+=( "V=1" ); SHOW_OUTPUT=true; HIDDEN_COMMANDS=true ;;
                    "4") EXTRA_MAKE_FLAGS+=( "V=1" ); SHOW_OUTPUT=true; VERBOSE_COMMANDS=true ;;
                esac ;;

            # Disables -Werror config
            "-Wno-error")
                NO_WERROR=true ;;

            "") ;;

            *)
                die "Invalid parameter" ;;
        esac

        shift
    done

    # Default parameters
    [[ -z ${MODE} ]] && MODE="personal"
    [[ -z ${VERBOSITY_LEVEL} ]] && HIDDEN_COMMANDS=true

    # Easy to use variables for if statements
    [[ ${MODE} = "alpha" || ${MODE} = "beta" || ${MODE} = "rc" ]] && TEST=true
    [[ ${MODE} = "canary" ]] && { CANARY=true; PERSONAL_OPTS=true; }
    [[ ${MODE} = "personal" ]] && { PERSONAL=true; PERSONAL_OPTS=true; }
    [[ ${MODE} = "stable" ]] && STABLE=true
    [[ ${MODE} = "tmp" ]] && TMP=true

    [[ -z ${DEVICE} ]] && DEVICE="X00TD"

}

# 'cp -v' alias
function cp() {
    command cp ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# 'mv -v' alias
function mv() {
    command mv ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# 'rm -v' alias
function rm() {
    command rm ${VERBOSE_COMMANDS:+ "-v"} "${@}"
}

# Device "board" flags
function device_flags() {
    case ${DEVICE} in
        "X00TD")
            # Required flags
            [[ -z ${ANDROID_VERSION} ]] && ANDROID_VERSION=8.1.0
            AK2_SFX=${ANDROID_VERSION}

            BUILD_FUNCTION=build_kernel

            [[ -z ${COMPILER} ]] && COMPILER=clang

            [[ -z ${DEFCONFIG} ]] && DEFCONFIG="flat_defconfig"

            DEVICE_NAME_FILE=${DEVICE^}
            DEVICE_NAME_GITHUB=X00TD
            DEVICE_NAME_WEB=${DEVICE}

            if [[ -z ${CLANG_FOLDER} ]]; then
                # SC2153: Possible misspelling: TC_FOLDER may not be assigned, but GCC_FOLDER is.
                # shellcheck disable=SC2153
                if [[ -n ${AOSP_CLANG} ]]; then
                    CLANG_FOLDER=${TC_FOLDER}/linux-x86/clang-r346389b
                else
                    CLANG_FOLDER=${TC_FOLDER}/clang-8.x
                fi
            fi

            [[ -z ${GCC_FOLDER} ]] && GCC_FOLDER=${TC_FOLDER}/aarch64-linux-gnu-8.x
            [[ -z ${GCC_32_BIT_FOLDER} ]] && GCC_32_BIT_FOLDER=${TC_FOLDER}/btg-gcc-8.2.1-arm

            [[ -n ${STABLE} ]] && KERNEL_BRANCH=oreo

            MATCH_FLAG="${DEVICE_NAME_FILE}-v${VERSION::1}" ;;

        *)
            die "Invalid device!" ;;
    esac
}

# Automatically get cross compile prefix from GCC
function get_cc_prefix() {
    find "${1}" \( -type f -o -type l \) -name '*-gcc' | head -n1 | sed 's@.*/@@' | sed 's/gcc//'
}

# Set up other variables
function generate_variables() {
    # Folders
    SOURCE_FOLDER=${KERNEL_FOLDER}/${DEVICE_NAME_GITHUB}
    OUT_FOLDER=${HOME}/kernel/${DEVICE_NAME_GITHUB}

    if [[ -z ${IMAGE_ONLY} ]]; then
        ANYKERNEL2_FOLDER=${KERNEL_FOLDER}/anykernel2-${DEVICE_NAME_GITHUB}
        FILE_MOVE_HEAD=${HOME}/flatKernel

        case ${MODE} in
            "beta"|"bisect"|"canary"|"rc"|"stable")
                if [[ -z ${CANARY} ]]; then
                    FILE_MOVE=${FILE_MOVE_HEAD}/kernels/${DEVICE_NAME_WEB}/${ANDROID_VERSION}/${MODE}
                    FILE_MOVE_OLD=$(readlink -f "${FILE_MOVE}/../archive")
                fi ;;
            "tmp")
                FILE_MOVE=${FILE_MOVE_HEAD}/tmp/${DEVICE_NAME_WEB}/${ANDROID_VERSION} ;;
            "personal")
                FILE_MOVE=${FILE_MOVE_HEAD}/${DEVICE_NAME_WEB} ;;
            "zip")
                unset FILE_MOVE ;;
            *)
                die "Invalid mode specified!" ;;
        esac
    fi

    # Compilation variables
    ARCHITECTURE=arm64

    # Normal 64-bit GCC toolchain
    if [[ ! -d ${GCC_FOLDER} ]]; then
        GCC_FOLDER=${TC_FOLDER}/${GCC_FOLDER}
        [[ ! -d ${GCC_FOLDER} ]] && die "Invalid GCC folder specified!"
    fi
    GCC_BIN=${GCC_FOLDER}/bin
    CROSS_COMPILE=$(get_cc_prefix "${GCC_BIN}")
    [[ -z ${CROSS_COMPILE} ]] && die "64-bit GCC toolchain could not be found!"

    # 32-bit GCC toolchain if required
    if [[ -n ${GCC_32_BIT_FOLDER} ]]; then
        if [[ ! -d ${GCC_32_BIT_FOLDER} ]]; then
            GCC_32_BIT_FOLDER=${TC_FOLDER}/${GCC_32_BIT_FOLDER}
            [[ ! -d ${GCC_32_BIT_FOLDER} ]] && die "Invalid GCC folder specified!"
        fi
        GCC_32_BIT_BIN=${GCC_32_BIT_FOLDER}/bin
        CROSS_COMPILE_ARM32=$(get_cc_prefix "${GCC_32_BIT_BIN}")
        [[ -z ${CROSS_COMPILE_ARM32} ]] && die "32-bit GCC toolchain could not be found!"
    fi

    if [[ ${COMPILER} = "gcc" && ${DEVICE} = "X00TD" ]]; then
        case "$(basename "${GCC_FOLDER}")" in
             "btg-gcc-8.2.1-arm64"|"btg-gcc-7.3.1-arm64-linaro"|"btg-gcc-6.5.0-arm64-linaro")
                 KCFLAGS="-floop-nest-optimize \
                          -fgraphite-identity \
                          -ftree-loop-distribution \
                          -ffast-math \
                          -funsafe-math-optimizations \
                          -mcpu=cortex-a73.cortex-a53+crc+crypto \
                          -mtune=cortex-a73.cortex-a53" ;;
        esac
    fi

    # Handle Clang
    if [[ ${COMPILER} = "clang" ]]; then
        if [[ ! -d ${CLANG_FOLDER} ]]; then
            CLANG_FOLDER=${TC_FOLDER}/${CLANG_FOLDER}
            [[ ! -d ${CLANG_FOLDER} ]] && die "Invalid Clang folder specified!"
        fi
        CLANG_BIN=${CLANG_FOLDER}/bin
        [[ ! -f ${CLANG_BIN}/clang ]] && die "Clang binary could not be found!"

        CLANG_VERSION=$(clang_version "${CLANG_BIN}")
        case "$(basename "${CLANG_FOLDER}")" in
            "clang-8.x")
                KCFLAGS="-mllvm -polly \
                         -mllvm -polly-run-dce \
                         -mllvm -polly-run-inliner \
                         -mllvm -polly-opt-fusion=max \
                         -mllvm -polly-ast-use-context \
                         -mllvm -polly-vectorizer=stripmine \
                         -mllvm -polly-detect-keep-going \
                         -march=armv8-a+crypto+crc \
                         -mcpu=cortex-a53+crypto+crc"
                ;;
            "linux-x86")
                KCFLAGS="-march=armv8-a+crypto+crc \
                         -mcpu=cortex-a53+crypto+crc"
                ;;
        esac
    fi

    # Add folders to LD_LIBRARY_PATH and PATH
    LD_LIBRARY_PATH=$(find "${CLANG_FOLDER}" -maxdepth 1 -name 'lib' -o -name 'lib64' -type d)${LD_LIBRARY_PATH:+":${LD_LIBRARY_PATH}"}
    PATH=${CLANG_BIN:+"${CLANG_BIN}:"}${GCC_BIN}:${GCC_32_BIT_BIN:+"${GCC_32_BIT_BIN}:"}:${BIN_FOLDER}:${PATH}
    export LD_LIBRARY_PATH PATH
}

# Clean up
function clean_up() {
    # Clean AnyKernel2 folder if building a zip
    if [[ -n ${ANYKERNEL2_FOLDER} ]]; then
        cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"

        #[[ -z ${ANYKERNEL2_BRANCH} ]] && ANYKERNEL2_BRANCH=${DEVICE_NAME_GITHUB}-flash-${AK2_SFX}

        #git checkout ${HIDDEN_COMMANDS:+ "-q"} "${ANYKERNEL2_BRANCH}"
        git clean -fxd ${HIDDEN_COMMANDS:+ "-q"}
    fi

    # Only checkout if kernel_branch exists and we aren't bisecting or rebasing
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"
    if [[ -n ${KERNEL_BRANCH} ]]; then
        [[ ${KERNEL_BRANCH} =~ "queue-" ]] && CACHED_BRANCH=$(git cb)
        if [[ -z $(git status | rg "bisec|rebas") ]]; then
            git checkout ${HIDDEN_COMMANDS:+ "-q"} "${KERNEL_BRANCH}" || die "${KERNEL_BRANCH} doesn't exist!"
        fi
    fi
    [[ -z ${HIDDEN_COMMANDS} ]] && echo
}

# Make wrapper for make function for GCC
function make_wrapper_gcc() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${CROSS_COMPILE}" \
         CROSS_COMPILE_ARM32="${CCACHE} ${CROSS_COMPILE_ARM32}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KCFLAGS="${KCFLAGS}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "${@}"
}

# Make wrapper for make function for Clang
function make_wrapper_clang() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CC="${CCACHE} clang" \
         CLANG_TRIPLE=aarch64-linux-gnu- \
         CROSS_COMPILE="${CROSS_COMPILE}" \
         CROSS_COMPILE_ARM32="${CROSS_COMPILE_ARM32}" \
         HOSTCC="${CCACHE} clang" \
         HOSTLD=ld.lld \
         KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         KCFLAGS="${KCFLAGS}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "${@}"
}

# Silence output function
function kmake() {
    # Only show errors and warnings when compiling (unless debug)
    if [[ -n ${SHOW_OUTPUT} ]]; then
        make_wrapper_${COMPILER} "${@}"
    else
        make_wrapper_${COMPILER} "${@}" |& rg --color=never --after-context=${RG_LINES:-10} "error:|warning:" && echo
    fi
}

# Setup compilation
function generate_version() {
    # This is set in the defconfig
    CONFIG_LOCALVERSION="-fk"
    LOCALVERSION_ZIP="-${DEVICE_NAME_FILE}"

    # Add version if present
    if [[ -n ${VERSION} ]]; then
        VERSION_TEXT="-v${VERSION}"
        LOCALVERSION="${LOCALVERSION}${VERSION_TEXT}"
    fi

    # If the mode isn't stable, add hash information to the file for debugging
    if [[ -z ${STABLE} && ${DEVICE} != "op6-custom" ]]; then
        # Furthermore, if it is a personal build, use a shorter hash length
        [[ -n ${PERSONAL} ]] && NUM=8 || NUM=12
        SHA="-g$(git rev-parse --verify --short=${NUM} HEAD)"
        LOCALVERSION="${LOCALVERSION}${SHA}"

        # Don't add the hash to the zip name for personal builds, use the date instead
        if [[ -n ${PERSONAL} ]]; then
            unset SHA
            DATE="-$(date +%Y%m%d-%H%M)"
        fi
    fi

    # If there are uncommitted changes, mark as dirty
    git status -uno --porcelain | grep -qv '^.. scripts/package' && LOCALVERSION="${LOCALVERSION}-dirty"

    # If REVISION exists, use it for the file
    if [[ -n ${REVISION} ]]; then
        REVISION_FOR_FILE=".${MODE::1}${REVISION}"

        # If REVISION is greater than or equal to 1, pass it to the build system
        [[ ${REVISION} -ge 1 ]] && KBUILD_BUILD_VERSION=${REVISION}
    fi

    # Export KERNEL_NAME based on the above information
    KERNEL_NAME="${CONFIG_LOCALVERSION/-/}${LOCALVERSION_ZIP}${VERSION_TEXT}${REVISION_FOR_FILE}${SHA}${DATE}"

    # Set final package names
    UNSIGNED_ZIP=${KERNEL_NAME,,}-unsigned.zip
    SIGNED_ZIP=${KERNEL_NAME,,}.zip
}

# Print variables
function print_variables() {
    echo "${BOLD}Device:${RST}     ${DEVICE}\n"

    echo "${BOLD}Branch:${RST}     $(git describe --exact-match 2>/dev/null || git cb) @ $(git kf)\n"

    [[ ${COMPILER} = "clang" ]] && echo "${BOLD}Clang:${RST}      $(command -v clang)\n"

    echo "${BOLD}GCC:${RST}        $(command -v "${CROSS_COMPILE}"gcc)\n"
}

# Build kernel image
function build_kernel() {
    # Clean out folder
    rm -rf ${OUT_FOLDER}

    # Point to proper defconfig and generate version files
    kmake ${DEFCONFIG} prepare

    # If we want to build with KASAN, do it now
    if [[ -n ${KASAN} ]]; then
        ./scripts/config --file ${OUT_FOLDER}/.config -e CONFIG_KASAN \
                                                      -e CONFIG_KASAN_INLINE \
                                                      -e CONFIG_TEST_KASAN \
                                                      -e CONFIG_KCOV \
                                                      -e CONFIG_SLUB \
                                                      -e CONFIG_SLUB_DEBUG \
                                                      -e CONFIG_SLUB_DEBUG_ON \
                                                      -d CONFIG_SLUB_DEBUG_PANIC_ON \
                                                      -d CONFIG_KASAN_OUTLINE \
                                                      -d CONFIG_KERNEL_LZ4 \
                                                      --set-val CONFIG_FRAME_WARN 0
        kmake olddefconfig
    fi

    # If requested, disable -Werror
    if [[ -n ${NO_WERROR} ]]; then
        ./scripts/config --file ${OUT_FOLDER}/.config -d CONFIG_CC_WERROR
        kmake olddefconfig
    fi

    if [[ -n ${PERSONAL} ]]; then
        ./scripts/config --file ${OUT_FOLDER}/.config -e CONFIG_WIREGUARD_DEBUG
        kmake olddefconfig
    fi

    # Notify Telegram of build starting
    SHORT_CHANGELOG=${HOME}/shortlogs/${DEVICE_NAME_FILE,,}-${VERSION//./}
    [[ ! -f ${SHORT_CHANGELOG} && -n "${TEST}${STABLE}" ]] && die "Missing short changelog!"

    # Make the kernel
    kmake ${EXTRA_MAKE_FLAGS:+ "${EXTRA_MAKE_FLAGS[@]}"}

    [[ -n ${CACHED_BRANCH} ]] && git ch ${HIDDEN_COMMANDS:+ "-q"} "${CACHED_BRANCH}"

    case ${DEVICE} in
        "X00TD")
            FILES_TO_MOVE=( "arch/arm64/boot/Image.gz-dtb:${ANYKERNEL2_FOLDER}" )
            ;;
    esac

    # Move them if they exist, error out if not
    KIMG=${FILES_TO_MOVE[0]%:*}
    if [[ -f "${OUT_FOLDER}/${KIMG}" ]]; then
        case ${ANDROID_VERSION} in
            "8.1.0") formatted_kernel_version oreo ;;
            "9") formatted_kernel_version pie ;;
        esac
        echo "${GRN}$(basename "${KIMG}") compiled successfully!${RST}\n"
        [[ -z ${IMAGE_ONLY} ]] && move_kernel_files
    else
        echo "${RED}Kernel image not found!${RST}\n"
        ending_info
    fi
}

# Move kernel files after compilation
function move_kernel_files() {
    # Move the kernel image
    for FTM in "${FILES_TO_MOVE[@]}"; do
        mkdir -p "${FTM#*:}"
        cp "${OUT_FOLDER}/${FTM%:*}" "${FTM#*:}"
    done
    echo "Version: $(cat "${OUT_FOLDER}/include/config/kernel.release")" > "${ANYKERNEL2_FOLDER}/version"

    # Grab modules too if they are present
    MODULES="$(find "${OUT_FOLDER}" -name '*.ko')"
    if [[ -n ${MODULES} ]]; then
        MODULES_FOLDER=${ANYKERNEL2_FOLDER}/modules/system/lib/modules
        mkdir -p "${MODULES_FOLDER}"
        for MOD in ${MODULES}; do
            "${CROSS_COMPILE}"strip --strip-unneeded "${MOD}"
            if [[ -f "${OUT_FOLDER}"/scripts/sign-file ]]; then
                "${OUT_FOLDER}"/scripts/sign-file sha512 \
                                                  "${OUT_FOLDER}/certs/signing_key.pem" \
                                                  "${OUT_FOLDER}/certs/signing_key.x509" \
                                                  "${MOD}"
            fi
            cp "${MOD}" "${MODULES_FOLDER}"
        done
    fi
}

# Package zip
function package_zip() {
    header "PACKAGING AND SIGNING ZIP"

    echo "${BOLD}Signed zip name:${RST}   ${SIGNED_ZIP}\n"
    [[ -n ${MODULES_FOLDER} ]] && \
        echo "${BOLD}Kernel modules:${RST}    $(find "${MODULES_FOLDER}" -type f | wc -l)\n"

    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 folder shift failed!"

    # Package the zip without the README
    zip ${HIDDEN_COMMANDS:+ "-q"} -r9 "${UNSIGNED_ZIP}" -x README.md -- *

    # Sign zip
    java -jar "${BIN_FOLDER}/zipsigner-3.0.jar" \
              "${UNSIGNED_ZIP}" \
              "${SIGNED_ZIP}"

    # If packaging failed, error out
    if [[ ! -f ${SIGNED_ZIP} ]]; then
        echo "${RED}Kernel zip not found after signing!${RST}\n"
        ending_info
    else
        echo "${GRN}Kernel zip successfully generated!${RST}\n"
    fi
}

# Setup folders
function setup_folders() {
    echo "  - Setting up final folders"

    # If FILE_MOVE doesn't exist, make it
    [[ ! -d ${FILE_MOVE} ]] && mkdir -p "${FILE_MOVE}"
    FILE_MOVE=$(readlink -f "${FILE_MOVE}")

    # If it isn't a stable build, clean the folder
    if [[ -z ${STABLE} ]]; then
        rm -rf "${FILE_MOVE:?}"/*
    else
        # Clean old test builds
        cd "${FILE_MOVE}/.." || die "Shift to zip folder failed!"
        rm -rf {alpha,beta,rc,tmp}/*
        git add .
        if [[ -n $(git status --porcelain) ]]; then
            gpg_available
            git commit --gpg-sign ${HIDDEN_COMMANDS:+ "--quiet"} --signoff --message "${DEVICE_NAME_FILE}: Remove old test builds"
            git push ${HIDDEN_COMMANDS:+ "--quiet"}
        fi

        # Move the old files to an archive folder
        [[ ! -d ${FILE_MOVE_OLD} ]] && mkdir -p "${FILE_MOVE_OLD}"
        rm -f "${FILE_MOVE}"/{.version,.changelog}
        OLD_FILES="$(find "${FILE_MOVE}" -maxdepth 1 -type f -name "*${MATCH_FLAG,,}*" 2>/dev/null)"
        if [[ -n ${OLD_FILES} ]]; then
            for OLD_FILE in ${OLD_FILES}; do
                mv ${VERBOSE_COMMANDS:+ "-v"} "${OLD_FILE}" "${FILE_MOVE_OLD}"
            done
        fi
    fi
}

# Move files and generate md5 files
function move_flashable_files() {
    echo "  - Moving files"

    (
        cd "${FILE_MOVE}" || die "Shift to ending folder failed!"
        mv "${ANYKERNEL2_FOLDER}/${SIGNED_ZIP}" "${FILE_MOVE}"
        md5sum "${SIGNED_ZIP}" > "${FILE_MOVE}/${SIGNED_ZIP}.md5"
        if [[ -n ${TEST} || -n ${STABLE} ]]; then
            cp "${SHORT_CHANGELOG}" "${KERNEL_NAME,,}-changelog.txt"
            if [[ -n ${STABLE} ]]; then
                ln -sf "${KERNEL_NAME,,}-changelog.txt" .changelog
                echo "${VERSION}" > .version
            fi
        fi
    )
}


#Ppush kernel files (zips/images) to GitHub
function push_flashable_files() {
    echo "  - Pushing files to GitHub"

    cd "${FILE_MOVE}" || die "Zip folder doesn't exist!"

    git add ..

    git commit --gpg-sign ${HIDDEN_COMMANDS:+ "--quiet"} --signoff --message "${KERNEL_NAME}"

    git push ${HIDDEN_COMMANDS:+ "--quiet"}
}

# Tag for stable releases
function tag_stable() {
    echo "  - Tagging ${KERNEL_NAME} as stable"

    for TAG_FOLDER in ${SOURCE_FOLDER} ${ANYKERNEL2_FOLDER}; do
        cd "${TAG_FOLDER}" || die "Issue with moving into ${TAG_FOLDER}!"

        git tag --sign --annotate "${KERNEL_NAME}" --message "${KERNEL_NAME}

$(tail -n +2 "${SHORT_CHANGELOG}")"
        git push ${HIDDEN_COMMANDS:+ "--quiet"} origin "${KERNEL_NAME}"
    done
}

# After build tasks
function after_build_tasks() {
    if [[ -z ${IMAGE_ONLY} ]]; then
        package_zip

        if [[ -n ${FILE_MOVE} ]]; then
            header "SHUFFLING FILES"

            setup_folders
            move_flashable_files

            if [[ -z ${PERSONAL} ]]; then
                [[ -z ${TMP} ]] && push_flashable_files
                [[ -n ${STABLE} ]] && tag_stable
            fi
            echo
        fi
    fi
}

# Print file info
function ending_info() {
    header "SCRIPT FINISHED!"

    END=$(date +"%s")
    DURATION=$(format_time "${START}" "${END}")

    if [[ "${*}" =~ "-s" ]]; then
        {
            echo "DURATION:   ${DURATION,,}"
            case ${ANDROID_VERSION} in
                "8.1.0") formatted_kernel_version oreo -p ;;
                "9") formatted_kernel_version pie -p ;;
            esac
        }
        if [[ -z ${IMAGE_ONLY} ]]; then
            if [[ -n ${FILE_MOVE} ]]; then
                FILE_LOCATION="${FILE_MOVE}"
                SIZE=$(du -h "${FILE_MOVE}/${SIGNED_ZIP}" | awk '{print $1}')
            else
                FILE_LOCATION=${ANYKERNEL2_FOLDER}/${SIGNED_ZIP}
                SIZE=$(du -h "${FILE_LOCATION}" | awk '{print $1}')
            fi

            echo "${RED}FILE LOCATION: ${FILE_LOCATION}"
            echo "SIZE: ${SIZE}${RST}"
        fi

        {
            echo "\`\`\`"
            echo "kernel build successfully for ${DEVICE} in ${DURATION,,}"
            echo
            echo "Version: $(cat "${OUT_FOLDER}/include/config/kernel.release")"
            echo "\`\`\`"
        } > "${TG_MSG_FILE}"
            tg_msg "$(cat "${TG_MSG_FILE}")"
        if [[ -n ${TG} ]]; then
            tg_upload "${FILE_MOVE}/${SIGNED_ZIP}"
        fi

        EXIT_CODE=0
    else
        echo "DURATION:   ${DURATION,,}"
        load_botinfo
        tg_msg "\`Build failed in ${DURATION,,}\`"
        EXIT_CODE=1
    fi

    echo "${RED}DURATION: ${DURATION}${RST}"
    echo
    echo "\a"
    exit ${EXIT_CODE}
}

################
#              #
# SCRIPT START #
#              #
################

source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"
source "${SCRIPTS_FOLDER}/snippets/fkv"
trap 'echo; die "Manually aborted!"' SIGINT SIGTERM

# Start tracking time
START=$(date +"%s")

clear
echo "${RED}"
echo
echo "================================================================================================"
echo
echo
echo "                   ________    ___  ______   __ __ __________  _   __________                   "
echo "                  / ____/ /   /   |/_  __/  / //_// ____/ __ \/ | / / ____/ /                   "
echo "                 / /_  / /   / /| | / /    / ,<  / __/ / /_/ /  |/ / __/ / /                    "
echo "                / __/ / /___/ ___ |/ /    / /| |/ /___/ _, _/ /|  / /___/ /___                  "
echo "               /_/   /_____/_/  |_/_/    /_/ |_/_____/_/ |_/_/ |_/_____/_____/                  "
echo
echo
echo
echo "================================================================================================"
echo

#################
# MAKING KERNEL #
#################

header "COMPILING KERNEL"

# Parse command line parameters and setup options
parse_parameters "${@}"
device_flags
generate_variables

# Clean up the source
clean_up

# Generate variables such as versions
generate_version

# Print relevant variables
print_variables

# Build kernel
${BUILD_FUNCTION}

# After build tasks
after_build_tasks

# Print file info and time
ending_info -s
